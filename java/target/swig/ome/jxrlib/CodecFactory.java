/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ome.jxrlib;

class CodecFactory {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected CodecFactory(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CodecFactory obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JXRJNI.delete_CodecFactory(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void decoderFromFile(ImageDecoder decoder, String inputFile) {
    JXRJNI.CodecFactory_decoderFromFile(swigCPtr, this, ImageDecoder.getCPtr(decoder), decoder, inputFile);
  }

  public void decoderFromBytes(ImageDecoder decoder, java.nio.ByteBuffer NIOBUFFER, long offset, long length) {
  assert NIOBUFFER.isDirect() : "Buffer must be allocated direct.";
    {
      JXRJNI.CodecFactory_decoderFromBytes(swigCPtr, this, ImageDecoder.getCPtr(decoder), decoder, NIOBUFFER, offset, length);
    }
  }

  public FormatConverter createFormatConverter(ImageDecoder decoder, String extension) {
    return new FormatConverter(JXRJNI.CodecFactory_createFormatConverter(swigCPtr, this, ImageDecoder.getCPtr(decoder), decoder, extension), true);
  }

  public CodecFactory() {
    this(JXRJNI.new_CodecFactory(), true);
  }

}

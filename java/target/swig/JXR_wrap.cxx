/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


  #include "CodecFactory.hpp"
  #include "DecodeContext.hpp"
  #include "Factory.hpp"
  #include "FormatConverter.hpp"
  #include "FormatError.hpp"
  #include "ImageDecoder.hpp"
  #include "ImageEncoder.hpp"
  #include "Resolution.hpp"
  #include "Stream.hpp"

SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1ImageData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1ImageData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORT jchar JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1ImageData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  GUID *arg1 = (GUID *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->Data1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GUID *arg1 = (GUID *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  result = (unsigned long) ((arg1)->Data1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GUID *arg1 = (GUID *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Data2 = arg2;
}


SWIGEXPORT jint JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GUID *arg1 = (GUID *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  result = (unsigned short) ((arg1)->Data2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GUID *arg1 = (GUID *) 0 ;
  unsigned short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Data3 = arg2;
}


SWIGEXPORT jint JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GUID *arg1 = (GUID *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  result = (unsigned short) ((arg1)->Data3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  GUID *arg1 = (GUID *) 0 ;
  unsigned char *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->Data4;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_ome_jxrlib_JXRJNI_GUID_1Data4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  GUID *arg1 = (GUID *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GUID **)&jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->Data4);
  jresult = SWIG_JavaArrayOutUchar(jenv, (unsigned char *)result, 8); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1GUID(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GUID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GUID *)new GUID();
  *(GUID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1GUID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GUID *arg1 = (GUID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GUID **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1FormatError(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  jxrlib::FormatError *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (jxrlib::FormatError *)new jxrlib::FormatError(arg1);
  *(jxrlib::FormatError **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ome_jxrlib_JXRJNI_FormatError_1getMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  jxrlib::FormatError *arg1 = (jxrlib::FormatError *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::FormatError **)&jarg1; 
  result = (arg1)->what();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1FormatError(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::FormatError *arg1 = (jxrlib::FormatError *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::FormatError **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_CodecFactory_1decoderFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jxrlib::CodecFactory *arg1 = (jxrlib::CodecFactory *) 0 ;
  jxrlib::ImageDecoder *arg2 = 0 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(jxrlib::CodecFactory **)&jarg1; 
  arg2 = *(jxrlib::ImageDecoder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "jxrlib::ImageDecoder & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    (arg1)->decoderFromFile(*arg2,arg3);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_CodecFactory_1decoderFromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jlong jarg4, jlong jarg5) {
  jxrlib::CodecFactory *arg1 = (jxrlib::CodecFactory *) 0 ;
  jxrlib::ImageDecoder *arg2 = 0 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(jxrlib::CodecFactory **)&jarg1; 
  arg2 = *(jxrlib::ImageDecoder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "jxrlib::ImageDecoder & reference is null");
    return ;
  } 
  {
    arg3 = (unsigned char *) jenv->GetDirectBufferAddress(jarg3); 
    if (arg3 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  try {
    (arg1)->decoderFromBytes(*arg2,arg3,arg4,arg5);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
  
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_CodecFactory_1createFormatConverter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  jxrlib::CodecFactory *arg1 = (jxrlib::CodecFactory *) 0 ;
  jxrlib::ImageDecoder *arg2 = 0 ;
  std::string arg3 ;
  jxrlib::FormatConverter result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(jxrlib::CodecFactory **)&jarg1; 
  arg2 = *(jxrlib::ImageDecoder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "jxrlib::ImageDecoder & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = (arg1)->createFormatConverter(*arg2,arg3);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(jxrlib::FormatConverter **)&jresult = new jxrlib::FormatConverter((const jxrlib::FormatConverter &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1CodecFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::CodecFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (jxrlib::CodecFactory *)new jxrlib::CodecFactory();
  *(jxrlib::CodecFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1CodecFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::CodecFactory *arg1 = (jxrlib::CodecFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::CodecFactory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1Factory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::Factory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  try {
    result = (jxrlib::Factory *)new jxrlib::Factory();
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(jxrlib::Factory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_Factory_1createStreamFromFilename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  jxrlib::Factory *arg1 = (jxrlib::Factory *) 0 ;
  std::string arg2 ;
  jxrlib::Stream result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::Factory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (arg1)->createStreamFromFilename(arg2);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(jxrlib::Stream **)&jresult = new jxrlib::Stream((const jxrlib::Stream &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1Factory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::Factory *arg1 = (jxrlib::Factory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::Factory **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1FormatConverter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::FormatConverter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (jxrlib::FormatConverter *)new jxrlib::FormatConverter();
  *(jxrlib::FormatConverter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1FormatConverter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::FormatConverter *arg1 = (jxrlib::FormatConverter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::FormatConverter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  try {
    (arg1)->initialize();
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getFrameCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  try {
    result = (unsigned int)(arg1)->getFrameCount();
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1selectFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->selectFrame(arg2);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getGUIDPixFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  GUID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  result = (arg1)->getGUIDPixFormat();
  *(GUID **)&jresult = new GUID((const GUID &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getBlackWhite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  result = (bool)(arg1)->getBlackWhite();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  result = (arg1)->getWidth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  result = (arg1)->getHeight();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getBytesPerPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  result = (arg1)->getBytesPerPixel();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  jxrlib::Resolution result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  try {
    result = (arg1)->getResolution();
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(jxrlib::Resolution **)&jresult = new jxrlib::Resolution((const jxrlib::Resolution &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getRawBytes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  {
    arg2 = (unsigned char *) jenv->GetDirectBufferAddress(jarg2); 
    if (arg2 == NULL) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "Unable to get address of a java.nio.ByteBuffer direct byte buffer. Buffer must be a direct buffer and not a non-direct buffer.");  
    }  
  }
  try {
    (arg1)->getRawBytes(arg2);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
  
}

SWIGEXPORT jbyteArray JNICALL Java_ome_jxrlib_JXRJNI_ImageDecoder_1getByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
    std::vector<unsigned char> result;
    jbyteArray jresult;
  
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
    try {
      result = (arg1)->getRawBytes();
    }
    catch(jxrlib::FormatError &_e) {
      {
        jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
        if (exception) {
          jenv->ThrowNew(exception, (&_e)->what());
        }
        return 0;
      }
    }
  
    jresult = jenv->NewByteArray(result.size());
    if (jresult == NULL) {
      return NULL; // Out of memory
    }
    jenv->SetByteArrayRegion(jresult, 0, result.size(), (signed char *)result.data());
    return jresult;
  }

SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1ImageDecoder(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::ImageDecoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (jxrlib::ImageDecoder *)new jxrlib::ImageDecoder();
  *(jxrlib::ImageDecoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1ImageDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::ImageDecoder *arg1 = (jxrlib::ImageDecoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::ImageDecoder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1ImageEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  jxrlib::Stream arg1 ;
  std::string arg2 ;
  jxrlib::Stream *argp1 ;
  jxrlib::ImageEncoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(jxrlib::Stream **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null jxrlib::Stream");
    return 0;
  }
  arg1 = *argp1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (jxrlib::ImageEncoder *)new jxrlib::ImageEncoder(arg1,arg2);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  *(jxrlib::ImageEncoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageEncoder_1initializeWithDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jxrlib::ImageEncoder *arg1 = (jxrlib::ImageEncoder *) 0 ;
  jxrlib::ImageDecoder *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(jxrlib::ImageEncoder **)&jarg1; 
  arg2 = *(jxrlib::ImageDecoder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "jxrlib::ImageDecoder & reference is null");
    return ;
  } 
  try {
    (arg1)->initializeWithDecoder(*arg2);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageEncoder_1writeSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jxrlib::ImageEncoder *arg1 = (jxrlib::ImageEncoder *) 0 ;
  jxrlib::FormatConverter *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(jxrlib::ImageEncoder **)&jarg1; 
  arg2 = *(jxrlib::FormatConverter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "jxrlib::FormatConverter & reference is null");
    return ;
  } 
  try {
    (arg1)->writeSource(*arg2);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_ImageEncoder_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jxrlib::ImageEncoder *arg1 = (jxrlib::ImageEncoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(jxrlib::ImageEncoder **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1ImageEncoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::ImageEncoder *arg1 = (jxrlib::ImageEncoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::ImageEncoder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1Resolution(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::Resolution *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (jxrlib::Resolution *)new jxrlib::Resolution();
  *(jxrlib::Resolution **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1Resolution(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::Resolution *arg1 = (jxrlib::Resolution *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::Resolution **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1Stream(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::Stream *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (jxrlib::Stream *)new jxrlib::Stream();
  *(jxrlib::Stream **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1Stream(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::Stream *arg1 = (jxrlib::Stream *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::Stream **)&jarg1; 
  delete arg1;
}


  SWIGEXPORT jbyteArray JNICALL Java_ome_jxrlib_JXRJNI_DecodeContext_1decodeFirstFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jlong jarg4) {
  jbyteArray jresult = 0 ;
  jxrlib::DecodeContext *arg1 = (jxrlib::DecodeContext *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  signed char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  size_t temp_size;
  arg5 = &temp_size;
  (void)jarg1_;
  arg1 = *(jxrlib::DecodeContext **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  try {
    result = (signed char *)(arg1)->decodeFirstFrame(arg2,arg3,arg4,arg5);
  }
  catch(jxrlib::FormatError &_e) {
    {
      jclass exception = jenv->FindClass("ome/jxrlib/FormatError");
      if (exception) {
        jenv->ThrowNew(exception, (&_e)->what());
      }
      return 0;
    }
  }
  
  {
    jresult = jenv->NewByteArray(temp_size);
    if (!jresult) return 0;
    jenv->SetByteArrayRegion(jresult, 0, temp_size, result);
    delete[] result;
  }
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ome_jxrlib_JXRJNI_new_1DecodeContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  jxrlib::DecodeContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (jxrlib::DecodeContext *)new jxrlib::DecodeContext();
  *(jxrlib::DecodeContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ome_jxrlib_JXRJNI_delete_1DecodeContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jxrlib::DecodeContext *arg1 = (jxrlib::DecodeContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(jxrlib::DecodeContext **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

